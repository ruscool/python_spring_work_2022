# todo: Изучаем пакет pandas
#
# После установки библиотеки pandas выполните следующие действия:
#
# Изучите справку по модулю (для чего нужен модуль , какие возможности предоставляет)
# Найдите расположение директории модуля pandas и изучите его содержимое
# Получите список доступных атрибутов модуля pandas
# Импортируйте модуль pandas в исполняемый скрипт
# С помощью модуля pandas ознакомьтесь со структурой  DataFrame, фильтрации данных,
# загрузки данных из формата сsv (рассмотрите примеры статьи)
# Установите библиотеку matplotlib, создайте график на своем наборе данных.

# Опорная статья:  https://egorovegor.ru/pandas-obrabotka-i-analiz-dannyh-v-python/

import pandas as pd
import matplotlib.pyplot as plt


def create_table():
    """
    Объект DataFrame имеет два индекса по столбцам и строкам. Если индекс
    по строкам не указан вручную, то pandas задает его автоматически.

    ссылка: https://egorovegor.ru/pandas-obrabotka-i-analiz-dannyh-v-python/
    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017 год': [1665, 179, 131, 60, 50],
        '2018 год': [1702, 182, 154, 63, 58],
    })
    return df


def add_index():
    """
    Вызывая метод DataFrame мы передали ему аргумент index со списком именованных индексов.

    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017 год': [1665, 179, 131, 60, 50],
        '2018 год': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ']
    )
    return df


def filter_all():
    """
    Pandas позволяет производить фильтрацию вывода по индексам и столбцам.
    Так же можно комбинировать индексы и колонки, использовать слайсы и логические выражения

    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017 год': [1665, 179, 131, 60, 50],
        '2018 год': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ'])
    print('Фильтр по столбцу\n', df['Страна'], '\n')  # фильтр по столбцу
    print('По строковому индексу\n', df.loc['RU'], '\n')
    print('По срезам\n', df[3:], '\n')
    print('С использованием условий\n', df[df["2018 год"] > 100]['Страна'], '\n')


def rename_columns():
    """
    Вы можете создавать, удалять и переименовывать ваши столбцы в любой момент времени

    Важно: результат выполнение метода rename возвращает новый измененный объект DataFrame,
    поэтому переназначь основной экземпляр DataFrame

    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017 год': [1665, 179, 131, 60, 50],
        '2018 год': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ'])
    df.rename(columns={'2018 год': '2018', '2017 год': '2017'})


def create_columns():
    """
    Создание новой колонки в таблице

    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017': [1665, 179, 131, 60, 50],
        '2018': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ'])
    df['Рост'] = df['2018'] - df['2017']
    # print(df)
    return df


def del_columns():
    """
    Для удаления столбца существует метод drop, так же необходимо передать в
    аргумент axis значение index или columns

    Важно: результат выполнение метода drop возвращает новый измененный объект DataFrame,
     поэтому не забудьте переназначить DataFrame
    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017': [1665, 179, 131, 60, 50],
        '2018': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ'])
    df['Рост'] = df['2018'] - df['2017']
    print(df, '\n')
    df_drop = df
    drop = df_drop.drop(["Рост"], axis="columns")
    print(drop)


def create_from_csv():
    """
    Загрузка из файла csv

    """
    text = pd.read_csv('algoritm.csv')
    print(text)


def save_to_csv():
    """
    Запись данных таблицы в файл csv

    """
    text = create_columns()
    text.to_csv('country.csv')


def grafic_plot():
    """
    Самый просто способ сгенерировать график, это передать обработчику
     для одной из координат, для второй он возьмет информацию из индекса.
    одиночный график
    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017 год': [1665, 179, 131, 60, 50],
        '2018 год': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ']
    )
    df.plot(kind='barh', y='2017 год', color='green')
    plt.show()


def grafic_plot_all():
    """
    Самый просто способ сгенерировать график, это передать обработчику
     для одной из координат, для второй он возьмет информацию из индекса.

    """
    df = pd.DataFrame({
        'Страна': ['Россия', 'Казахстан', 'Украина', 'Белоруссия', 'Узбекистан'],
        '2017 год': [1665, 179, 131, 60, 50],
        '2018 год': [1702, 182, 154, 63, 58],
    }, index=['RU', 'KZ', 'UA', 'BY', 'UZ']
    )
    df.pivot(columns="Страна").plot(kind='bar')
    plt.show()


l = [create_table, add_index, filter_all, rename_columns, create_columns, del_columns,
     create_from_csv, save_to_csv, grafic_plot, grafic_plot_all]
for i in l:
    print(help(i))
